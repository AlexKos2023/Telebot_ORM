import json
import random
from table_starter import*
from sqlalchemy.sql import func
from sqlalchemy import and_
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup


#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ")
bot = TeleBot(token_bot, state_storage=state_storage, skip_pending=True)
#skip_pending=True - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


# –§—É–Ω–∫—Ü–∏—è, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –Ω–∞–∂–∞–ª 'cards', 'start'
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


#–û—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏. –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é HTML.
@bot.message_handler(commands=['help'])
def send_help(message):
    cid = message.chat.id
    get_user_step(cid)
    ans =  (f'<u><b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã '
            f'–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. '
            f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. '
            f'–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, '
            f'–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. '
            f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:</b></u>\n'
            f'–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
            f'—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n'
            f'–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è')
    bot.send_message(cid, ans, parse_mode='html') 

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–ª–æ–≤–æ, –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ —á–µ—Ç—ã—Ä–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞)
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        send_help(message)
        #–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–∫—Ä—ã–≤—à–∏—Ö –±–æ—Ç–∞
        try:
            with open(r"next_data.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                data[0]['fields'].update({"name": cid})
                for i in range(1, 11):
                    data[i]['fields'].update({"user_id": cid})
                for record in data:
                    model = {
                        "user" : User,
                        "user_words": User_Words
                    }[record.get('model')]
                    session.add(model(**record.get('fields')))
                session.commit()
        except:
            pass
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    #–í—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ ID
    user = session.query(User).filter_by(name = cid).first()
    q = session.query(Words).join(User_Words).filter_by(user_id = user.name).order_by(func.random()).first()
    a = (list(str(q).split(", ")))[0]
    b = (list(str(q).split(", ")))[1]
    session.commit()
    target_word = a  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = b  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    #–ß–µ—Ç—ã—Ä–µ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã
    trach = []
    q = session.query(Words).all()
    for i in q:
        trach.append(((list(str(i).split(", ")))[0]))
    if a in trach:
        trach.remove(a)
    others = random.sample(trach, 4)  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    if message.text == Command.DELETE_WORD:
        msg = bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        bot.register_next_step_handler(msg, user_answer_del)
    
def user_answer_del(message):
    vision = []
    vision_all = []
    cid = message.chat.id
    name_del = message.text
    if name_del == "–î–∞–ª—å—à–µ ‚è≠":
        create_cards(message)
    elif name_del == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï":
        add_word(message)
    elif name_del == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô":
        delete_word(message)
        return
    else:
        word = session.query(Words).filter_by(word=name_del).first()
        user = session.query(User).filter_by(name=cid).first()
        q = session.query(Words).filter_by(is_public=True).all()
        for i in q:
            vision.append(((list(str(i).split(", ")))[0]))
        q1 = session.query(Words).join(User_Words).join(User).filter(and_(User.name == cid, User.name == User_Words.user_id, Words.id == User_Words.words_id, Words.is_public == False)).all()
        for i in q1:
            vision_all.append(((list(str(i).split(", ")))[0]))
        if name_del in vision:
            bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —É–¥–∞–ª–µ–Ω–∏—é")
            create_cards(message)
        elif name_del in vision_all:
            q = session.query(User_Words).filter_by(user_id=user.name, words_id=word.id).first()
            session.delete(q)
            session.commit()
            create_cards(message)
        else:
            bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –í–∞—à–µ–º —Å–ø–∏—Å–∫–µ")
            create_cards(message)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ ID
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    if message.text == Command.ADD_WORD:
        msg = bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")
        bot.register_next_step_handler(msg, user_answer)

new_word_list = []

def user_answer(message):
    cid = message.chat.id
    name = message.text
    vision = []
    vision_all = []
    if name == "–î–∞–ª—å—à–µ ‚è≠":
        create_cards(message)
    elif name == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï":
        add_word(message)
    elif name == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô":
        delete_word(message)
        return
    else:
        print(name)
        word = session.query(Words).filter_by(word=name).first()
        user = session.query(User).filter_by(name=cid).first()
        q = session.query(Words).filter_by(is_public=True).all()
        for i in q:
            vision.append(((list(str(i).split(", ")))[0]))
        q1 = session.query(Words).join(User_Words).join(User).filter(and_(User.name == User_Words.user_id, Words.id == User_Words.words_id, Words.is_public == False)).all()
        for i in q1:
            vision_all.append(((list(str(i).split(", ")))[0]))
        name_x = name
        name_x_del = list(name_x)
        name_x_del.pop(-1)
        print(vision)
        print(vision_all)
        bild = ("".join(name_x_del))
        if name in vision or bild in vision:
            bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–æ–≤–æ–º —Å–ø–∏—Å–∫–µ")
            create_cards(message)
        elif name in vision_all:
            bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏")
            create_cards(message)
        else:
            new_word_list.append(name)
            msg = bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥")
            bot.register_next_step_handler(msg, user_answer2)
        

def user_answer2(message):
    all_false = []
    cid = message.chat.id
    name = message.text
    if name == "–î–∞–ª—å—à–µ ‚è≠":
        create_cards(message)
    elif name == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï":
        add_word(message)
    elif name == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô":
        delete_word(message)
        return new_word_list.clear()
    else:
        print(name)
        q1 = session.query(Words).filter_by(is_public=False).all()
        for i in q1:
            all_false.append(i)
        new_word_list.append(name)
        a = new_word_list[0]
        b = name # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        if a in all_false:
            q = session.query(Words).filter(Words.word == new_word_list[0]).all()
            for i in q:
                new_id = (i.id)
                u_w4 = User_Words(user_id = cid, words_id = new_id)
                session.add(u_w4)
                session.commit()
                create_cards(message)
        else:
            try:
                wr1 = Words(word = a, translation = b, is_public = False)
                session.add(wr1)
                session.commit()
                q = session.query(Words).filter(Words.word == a).all()
                for i in q:
                    new_id = (i.id)
                    u_w4 = User_Words(user_id = cid, words_id = new_id)
                    session.add(u_w4)
                    session.commit()
            except:
                pass
            bot.reply_to(message, f'–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ {a} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º {b} ')
            create_cards(message)
       

#–§—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª—è–µ—Ç –∫—Ä–µ—Å—Ç–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ª–∏–±–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º.
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=False)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
# reply_markup=markup - –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)

session.close()
